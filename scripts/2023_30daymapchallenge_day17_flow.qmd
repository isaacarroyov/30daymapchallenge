---
format:
  html:
    echo: false
    theme: journal
    jupyter: python3    
---

<style>
  @import url('https://fonts.googleapis.com/css2?family=Noto+Serif:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Oxygen:wght@300;400;700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    
    body {
        background: #F9FCFD;
        color: #51271E;
    }
    
    div[id^=cb] {
        font-family: 'Space Mono', monospace;
        /*background-color: #FDFCF6;*/ /*Cambiar dependiendo del fondo que se tenga + el tema de Quarto*/
        font-size: 0.75rem;
    }

    h1 {
        font-weight: 700;
        font-size: 1.8rem;
        font-family: 'Oxygen', sans-serif;
    }

    p {
        font-weight: 400;
        font-size: 0.75rem;
        font-family: 'Noto Serif', serif;
    }

    details>summary {
      font-family: 'Oxygen', sans-serif;
      font-weight: 700;
      font-size: 0.75rem;
      color: #51271E; /*Mismo color que aparece en body (texto)*/
      /*filter: saturate(50%) /*Menor saturación*/
    }



    #title_style {
      font-family: 'Oxygen', sans-serif;
      font-size: 1.1rem;
      font-weight: 700
    }


   #caption {
        font-size: 0.6rem;
        font-weight: 300;
    }
    
    #url_paleta_colores {
        color: steelblue;
        text-decoration: none;
    }

    #nota_subtitle {
        margin-top: -1em;
    }

    /* = = Vega-Lite Charts = = */
    /*
    .vega-embed {
        width: 100%;
        display: flex;
    }

    .vega-embed details,
    .vega-embed details summary {
        position: relative;
    }

    .vega-bind-name {
        font-weight: 400;
        color: #F1EFE3
    } */
    /* - Tooltips - */
    #vg-tooltip-element {
        max-width: 200px;
        font-family: 'Noto Serif', serif; /* Cambiar dependiendo de font-family de <p> */
        color: #51271E;
        font-weight: 400;
        border-radius: 15px;
        background-color: #FBF4EE; /* Cambiar dependiendo del tema + fondo + chart a usar */
    }
</style>

<h1>#30DayMapChallenge Day 17: Flow</h1>

<p id="title_style">Flujo de los vuelos (ida y vuelta) entre ciudades de México.</p>
<p id="nota_subtitle">
Durante Enero 2022, se registraron 32,987 vuelos, siendo el trayecto Ciudad de México - Cancún el de mayor número, con 2,287 vuelos entre ambas ciudades, es decir el 6.93% de todos los vuelos de Enero
</p>


```{python}
import numpy as np
import pandas as pd
import geopandas


df = pd.read_csv("./../data/lat_long_estadistica_operacional_destino_ene_2022_clean.csv")

```



```{python}
import altair as alt

data_geom_mex = alt.Data(url = "https://raw.githubusercontent.com/isaacarroyov/datos_facil_acceso/main/Gobierno-Mexicano/geometrias/00ent_mexico.geojson", format = alt.DataFormat(property = "features"))

hover_selection = alt.selection_point(fields = ["description"])


mapa_mexico = alt.Chart(
    data_geom_mex
  ).mark_geoshape(
    fill = "#CEE6F3",
    stroke = "black",
    strokeWidth = 0.5
  )

chart_flow_vuelos = (alt.Chart(df)
  .encode(
    longitude = "long_A:Q",
    latitude = "lat_A:Q",
    longitude2 = "long_B:Q",
    latitude2 = "lat_B:Q",
    size = alt.Size("n_vuelos:Q").legend(None),
    opacity = alt.condition(hover_selection, alt.value(1), alt.value(0.05)),
    tooltip = "description:N")
  )


puntos = alt.Chart(df).encode(latitude = "lat_A:Q", longitude = "long_A:Q").mark_circle(color = "#51271E", opacity = 1) + alt.Chart(df).encode(latitude = "lat_B:Q", longitude = "long_B:Q").mark_circle(color = "#51271E", opacity = 1)

lineas = chart_flow_vuelos.mark_rule(strokeCap = "round", color = "#6C3428")

mapa_final = ((mapa_mexico + puntos + lineas)
  .add_params(hover_selection)
  .project(type = "equalEarth")
  .properties(
    background = "transparent",
    width = "container",
    height = 500)
    )

mapa_final

```


<p id="caption">
<span style='font-weight:600;'>Datos</span>: Estadística Operacional por Destino 2022, Secretaría de Comunicación y Transporte (SCT) a través del <span style='font-weight:600;'>Portal de Datos Abiertos de México</span><br>Isaac Arroyo (@unisaacarroyov)
</p>

<details><summary>Data processing with Python</summary>

```python
# = = LOAD DATA = = #
flights = pd.read_csv("./data/estadistica_operacional_destino_ene_2022.csv")
flights['n_vuelos'] = pd.to_numeric(flights['n_vuelos'].str.replace(",", "").str.replace("-", ""), errors="coerce")
flights = flights.dropna().reset_index(drop = True)

# = = SUMMING UP THE FLIGHTS BETWEEN TWO CITIES = = #
df = flights.groupby([flights[['from', 'to']].min(axis=1), flights[['from', 'to']].max(axis=1)])['n_vuelos'].sum().reset_index()
df.columns = ["point_A", "point_B", "n_vuelos"]

df['point_A'] = df['point_A'].str.title()
df['point_B'] = df['point_B'].str.title()

# = = SAVE CSV = = #
df.to_csv("./data/estadistica_operacional_destino_ene_2022_clean.csv", index = False)
```

</details>

<details><summary>Get latitude and longitude with R</summary>

```R
library(tidyverse)
library(tidygeocoder)

df <- read_csv("./data/estadistica_operacional_destino_ene_2022_clean.csv") %>%
  mutate(point_A = if_else(point_A == "Mexico", "Mexico City", point_A),
         point_B = if_else(point_B == "Mexico", "Mexico City", point_B))

address_all_cities <- bind_rows(distinct(df, point_A) %>% rename(ciudad = point_A),
          distinct(df, point_B) %>% rename(ciudad = point_B)) %>%
  distinct() %>%
  mutate(address = glue::glue("{ciudad}, Mexico"))

long_lat_cities <- address_all_cities %>%
  geocode(address = address, method = "arcgis")

# = = COMPLETE + SAVE DATAFRAME = = #
df %>%
  left_join(y = select(long_lat_cities, -address),
            by = join_by(point_A == ciudad)) %>%
  rename(lat_A = lat, long_A = long) %>%
  left_join(y = select(long_lat_cities, -address),
            by = join_by(point_B == ciudad)) %>%
  rename(lat_B = lat, long_B = long) %>%
  mutate(
    point_A = if_else(point_A == "Mexico City", "Ciudad de Mexico", point_A),
    point_B = if_else(point_B == "Mexico City", "Ciudad de Mexico", point_B),
    description = glue::glue("Se realizaron {scales::comma(n_vuelos)} vuelos entre los aeropuertos de {point_A} y {point_B} en Enero 2022")) %>%
  write_csv("./data/lat_long_estadistica_operacional_destino_ene_2022_clean.csv")

```
</details>